package sender

import (
	"github.com/Golang-Tools/etcdhelper/etcdproxy"
	log "github.com/Golang-Tools/loggerhelper/v2"
	"github.com/Golang-Tools/optparams"
)

type Application struct {
	App_Version        string `json:"app_version" jsonschema:"title=v,description=应用版本,default={{ app_name }}_sender"`
	App_Name           string `json:"app_name" jsonschema:"required,title=n,description=应用名,default=0.0.1"`
	Log_Level          string `json:"log_level" jsonschema:"required,title=l,description=log等级,enum=TRACE,enum=DEBUG,enum=INFO,enum=WARN,enum=ERROR,default=DEBUG"`
	ETCD_Endpoints     string `json:"etcd_endpoints" jsonschema:"required,title=e,description=etcd集群地址"`
	ETCD_Dial_Timeout  int    `json:"etcd_dial_timeout" jsonschema:"required,title=d,description=etcd的联通超时,default=300"`
	ETCD_Query_Timeout int    `json:"etcd_query_timeout" jsonschema:"title=q,description=etcd的请求超时"`
}

func (app *Application) Main() {
	log.Set(log.WithLevel(app.Log_Level), log.AddExtField("app_name", app.App_Name), log.AddExtField("app_version", app.App_Version))
	log.Info("get config", log.Dict{"config": app})
	opts := []optparams.Option[etcdproxy.Options]{etcdproxy.UseEtcdOpts(etcdproxy.WithDialTimeout(app.ETCD_Dial_Timeout))}
	if app.ETCD_Query_Timeout > 0 {
		opts = append(opts, etcdproxy.WithQueryTimeout(app.ETCD_Query_Timeout))
	}
	etcdproxy.Default.Init(app.ETCD_Endpoints, opts...)
	defer etcdproxy.Default.Close()
	Handdler()
}
