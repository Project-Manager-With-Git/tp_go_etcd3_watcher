package sender

import (
	"os"
	"time"

	"{{ app_name }}/etcdproxy"

	log "github.com/Golang-Tools/loggerhelper"
	s "github.com/Golang-Tools/schema-entry-go"

	clientv3 "go.etcd.io/etcd/client/v3"
)

type Application struct {
	App_Version        string   `json:"app_version" jsonschema:"title=v,description=应用版本"`
	App_Name           string   `json:"app_name" jsonschema:"required,title=n,description=应用名"`
	Log_Level          string   `json:"log_level" jsonschema:"required,title=l,description=log等级,enum=TRACE,enum=DEBUG,enum=INFO,enum=WARN,enum=ERROR"`
	ETCD_URLS          []string `json:"etcd_urls" jsonschema:"required,title=u,description=etcd集群地址"`
	ETCD_Dial_Timeout  int      `json:"etcd_dial_timeout" jsonschema:"required,title=d,description=etcd的联通超时,单位s"`
	ETCD_Query_Timeout int      `json:"etcd_query_timeout" jsonschema:"title=q,description=etcd的请求超时,单位ms"`
}

func (app *Application) Main() {
	log.Init(app.Log_Level, map[string]interface{}{"app_name": app.App_Name, "app_version": app.App_Version})
	log.Info("get config", log.Dict{"config": app})
	if app.ETCD_Query_Timeout > 0 {
		err := etcdproxy.Client.InitFromOptions(&clientv3.Config{
			Endpoints:   app.ETCD_URLS,
			DialTimeout: time.Duration(app.ETCD_Dial_Timeout) * time.Second,
		},
			etcdproxy.WithQueryTimeout(time.Duration(app.ETCD_Query_Timeout)*time.Millisecond),
		)
		if err != nil {
			log.Error("Failed to init etcd", log.Dict{"error": err})
			os.Exit(1)
		}
	} else {
		err := etcdproxy.Client.InitFromOptions(&clientv3.Config{
			Endpoints:   app.ETCD_URLS,
			DialTimeout: time.Duration(app.ETCD_Dial_Timeout) * time.Second,
		})
		if err != nil {
			log.Error("Failed to init etcd", log.Dict{"error": err})
			os.Exit(1)
		}
	}
	defer etcdproxy.Client.Close()
	Handdler()
}

var App, _ = s.New(&s.EntryPointMeta{Name: "sender", Usage: "{{ app_name }} sender"}, &Application{
	App_Version:       "0.0.0",
	App_Name:          "{{ app_name }}_sender",
	Log_Level:         "DEBUG",
	ETCD_Dial_Timeout: 5,
})
