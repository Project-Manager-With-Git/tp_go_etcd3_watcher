package sender

import (
	"context"
	"fmt"
	"time"

	"github.com/Golang-Tools/etcdhelper/etcdproxy"

	"go.etcd.io/etcd/api/v3/v3rpc/rpctypes"
)

func handdler(i int) error {
	key := "/test/foo"
	value := fmt.Sprintf("bar%d", i)
	ctx, cancel := etcdproxy.Default.NewCtx()
	defer cancel()
	resp, err := etcdproxy.Default.Put(ctx, key, value)
	if err != nil {
		switch err {
		case context.Canceled:
			etcdproxy.Logger.Error("ctx is canceled by another routine", map[string]any{"err": err.Error()})
		case context.DeadlineExceeded:
			etcdproxy.Logger.Error("ctx is attached with a deadline is exceeded", map[string]any{"err": err.Error()})
		case rpctypes.ErrEmptyKey:
			etcdproxy.Logger.Error("client-side error", map[string]any{"err": err.Error()})
		default:
			etcdproxy.Logger.Error("bad cluster endpoints, which are not etcd servers", map[string]any{"err": err.Error()})
		}
		return err
	} else {
		etcdproxy.Logger.Info("send msg", map[string]any{"value": value, "key": key, "resp": resp})
		time.Sleep(time.Second)
		return nil
	}
}

func Handdler() {
	for i := 0; i < 10; i++ {
		err := handdler(i)
		if err != nil {
			break
		}
	}
}
